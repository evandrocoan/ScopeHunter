{
    "docs": [
        {
            "location": "/", 
            "text": "ScopeHunter\n\n\nSyntax Scope Viewer in Sublime Text.\n\n\n\n\nScopeHunter\n\n\nThis is a simple plugin that can get the scope under the cursor(s) in Sublime Text.  This plugin is useful for plugin development.\n\n\nDark theme with simple output:\n\n\n\n\nLight theme with advanced output:\n\n\n\n\nFeatures\n\n\nAll features are configurable via the settings file\n\n\n\n\nOptionally show output in tooltip (stylesheets are configurable).\n\n\nOptionally auto choose dark or light tooltip theme depending on your color scheme.\n\n\nOptionally dump output to auto-popup panel and/or console.\n\n\nOptionally dump scope to status bar (no multi-select support).\n\n\nMulti-select support for all output except status bar.\n\n\nOptionally log scope extent in line/char format and/or point format.\n\n\nOptionally copy scope(s) to clipboard.\n\n\nOptionally highlight and/or log scope extent.\n\n\nOptionally log color scheme colors and selectors.\n\n\nOptionally log location of Scheme file and Syntax.\n\n\nSupports \nSubNotify\n messages.", 
            "title": "About ScopeHunter"
        }, 
        {
            "location": "/#scopehunter", 
            "text": "Syntax Scope Viewer in Sublime Text.", 
            "title": "ScopeHunter"
        }, 
        {
            "location": "/#scopehunter_1", 
            "text": "This is a simple plugin that can get the scope under the cursor(s) in Sublime Text.  This plugin is useful for plugin development.  Dark theme with simple output:   Light theme with advanced output:", 
            "title": "ScopeHunter"
        }, 
        {
            "location": "/#features", 
            "text": "All features are configurable via the settings file   Optionally show output in tooltip (stylesheets are configurable).  Optionally auto choose dark or light tooltip theme depending on your color scheme.  Optionally dump output to auto-popup panel and/or console.  Optionally dump scope to status bar (no multi-select support).  Multi-select support for all output except status bar.  Optionally log scope extent in line/char format and/or point format.  Optionally copy scope(s) to clipboard.  Optionally highlight and/or log scope extent.  Optionally log color scheme colors and selectors.  Optionally log location of Scheme file and Syntax.  Supports  SubNotify  messages.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling ScopeHunter.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install ScopeHunter is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nScopeHunter\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ScopeHunter for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git ScopeHunter\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing ScopeHunter.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ScopeHunter is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  ScopeHunter ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install ScopeHunter for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git ScopeHunter    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of ScopeHunter.\n\n\n\n\nCommand Usage\n\n\nAll commands are accessible via the command palette.\n\n\nScope Hunter: Show Scope Under Cursor\n\n\nShow scope under cursor or cursors (depending whether multi-select is enabled).\n\n\nScope Hunter: Toggle Instant Scoper\n\n\nToggle scoping under cursor constantly.\n\n\nScope Hunter: User Settings\n\n\nIn order to change the standard settings of Scope Hunter, please go to \nPreferences -\n Package Settings -\n Scope Hunter\n and click on \nSettings - User\n.  Repeat that for \nSettings - Default\n, copy all the settings that you wish to change from the default settings to the user settings file.\n\n\nView options\n\n\nBy default, ScopeHunter (on ST3) uses the output panel to communicate the scope.  But if you prefer a more subtle \nor\n flashier way of displaying the scope, ScopeHunter can be configured to do so.\n\n\n    \n///////////////////////////\n\n    \n// View Options\n\n    \n///////////////////////////\n\n\n    \n// Show popup tooltip with info about scope\n\n    \nshow_popup\n:\n \nfalse\n,\n\n\n    \n// Show scope in status bar\n\n    \nshow_statusbar\n:\n \nfalse\n,\n\n\n    \n// Show scope in auto-popup panel\n\n    \nshow_panel\n:\n \ntrue\n,\n\n\n    \n// Show scopes in console\n\n    \nconsole_log\n:\n \nfalse\n,\n\n\n\n\n\n\nshow_popup\n\n\nThis uses the new ST3 tooltip API to display and is my personal favorite.  It shows a styled tooltip with all the information about the scope of the current cursor(s).  You get previews of the colors, and you can click links to copy the info to the clipboard.\n\n\nshow_statusbar\n\n\nThis shows just the scope in the status bar.  Simple and subtle.\n\n\nshow_panel\n\n\nThis shows the scope and related info in an output panel.  This allows a user to directly copy and paste the info from the panel.\n\n\nconsole_log\n\n\nThis is useful if you are doing something like \nshow_statusbar\n.  You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste.\n\n\nScope Info\n\n\nFor modes like \nshow_panel\n, \nconsole_log\n, and \nshow_popup\n you can control the info displayed.  You can keep it just to the scope, or you can extend it show other useful info.\n\n\n    \n///////////////////////////\n\n    \n// Additional Scope Info\n\n    \n///////////////////////////\n\n\n    \n// Show scope extent in point format\n\n    \nextent_points\n:\n \ntrue\n,\n\n\n    \n// Show scope extent in line/char format\n\n    \nextent_line_char\n:\n \ntrue\n,\n\n\n    \n// Show color and style at the given point\n\n    \nstyling\n:\n \ntrue\n,\n\n\n    \n// When showing a color with alpha transparency,\n\n    \n// Simulate what the color would look like in sublime\n\n    \n// by mixing the relevant background color,\n\n    \nshow_simulated_alpha_colors\n:\n \ntrue\n,\n\n\n    \n// Show the selector names and scopes\n\n    \n// responsible for the color and styles\n\n    \nselectors\n:\n \ntrue\n,\n\n\n    \n// Show current syntax and color scheme paths\n\n    \n// (click to open if using tooltips)\n\n    \nfile_paths\n:\n \ntrue\n,\n\n\n    \n// Highlight scope extent in view\n\n    \nhighlight_extent\n:\n \ntrue\n,\n\n\n\n\n\n\nextent_points\n\n\nShow the extent of the scope as view points.\n\n\nextent_line_char\n\n\nShow the extent of the scope as line/char or row/col format.\n\n\nhighlight_extent\n\n\nHighlight the scope extent.\n\n\nstyling\n\n\nShow not only the color value, but also the scope and text styling.\n\n\nshow_simulated_alpha_colors\n\n\nWhen showing color values, ScopeHunter can show the perceived color value of transparent colors.  It mixes the transparent foreground with the background giving the color value you are actually seeing.\n\n\nselectors\n\n\nShow the color scheme selectors that are responsible for applying the visible color and styles.\n\n\nfile_paths\n\n\nShow the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view.  In the tooltip, you can click these links and open the responsible file directly in Sublime Text.\n\n\nScope Highlighting\n\n\nWhen \nhighlight_extent\n is enabled, this controls the visual style of the highlights.  Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file.  Just define the scope to use and the supported style as shown below.\n\n\n    \n///////////////////////////\n\n    \n// Highlight Configuration\n\n    \n///////////////////////////\n\n\n    \n// Scope to use for the color\n\n    \nhighlight_scope\n:\n \ninvalid\n,\n\n\n    \n// Highlight style (underline|solid|outline|thin_underline|squiggly|stippled)\n\n    \nhighlight_style\n:\n \noutline\n,\n\n\n\n\n\n\nMiscellaneous Options\n\n\nLastly, there are a couple of other options:\n\n\n    \n///////////////////////////\n\n    \n// Additional Options\n\n    \n///////////////////////////\n\n\n    \n// Automatically copy scopes to clipboard\n\n    \nclipboard\n:\n \nfalse\n,\n\n\n    \n// Allow multi-select scope hunting\n\n    \nmultiselect\n:\n \ntrue\n,\n\n\n    \n// Max region size to highlight\n\n    \nhighlight_max_size\n:\n \n100\n,\n\n\n    \n// Use SubNotify plugin messages if installed\n\n    \nuse_sub_notify\n:\n \ntrue\n\n\n\n\n\n\nclipboard\n\n\nAuto-copies just the scope to the clipboard.\n\n\nmultiselect\n\n\nAllow displaying of the scope info for multiple cursor selections (does not work for \nshow_statusbar\n as space is very limited).\n\n\nhighlgiht_max_size\n\n\nFor performance, ScopeHunter is limited to highlight regions less that a given size.  If a region is bigger than the defined limit, it will not be highlighted.  You can control that limit here.\n\n\nuse_sub_notify\n\n\nIf you have the \nSubNotify\n installed, this will enable or disable messages through it.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of ScopeHunter.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#command-usage", 
            "text": "All commands are accessible via the command palette.  Scope Hunter: Show Scope Under Cursor  Show scope under cursor or cursors (depending whether multi-select is enabled).  Scope Hunter: Toggle Instant Scoper  Toggle scoping under cursor constantly.", 
            "title": "Command Usage"
        }, 
        {
            "location": "/usage/#scope-hunter-user-settings", 
            "text": "In order to change the standard settings of Scope Hunter, please go to  Preferences -  Package Settings -  Scope Hunter  and click on  Settings - User .  Repeat that for  Settings - Default , copy all the settings that you wish to change from the default settings to the user settings file.  View options  By default, ScopeHunter (on ST3) uses the output panel to communicate the scope.  But if you prefer a more subtle  or  flashier way of displaying the scope, ScopeHunter can be configured to do so.       /////////////////////////// \n     // View Options \n     /////////////////////////// \n\n     // Show popup tooltip with info about scope \n     show_popup :   false , \n\n     // Show scope in status bar \n     show_statusbar :   false , \n\n     // Show scope in auto-popup panel \n     show_panel :   true , \n\n     // Show scopes in console \n     console_log :   false ,   show_popup  This uses the new ST3 tooltip API to display and is my personal favorite.  It shows a styled tooltip with all the information about the scope of the current cursor(s).  You get previews of the colors, and you can click links to copy the info to the clipboard.  show_statusbar  This shows just the scope in the status bar.  Simple and subtle.  show_panel  This shows the scope and related info in an output panel.  This allows a user to directly copy and paste the info from the panel.  console_log  This is useful if you are doing something like  show_statusbar .  You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste.  Scope Info  For modes like  show_panel ,  console_log , and  show_popup  you can control the info displayed.  You can keep it just to the scope, or you can extend it show other useful info.       /////////////////////////// \n     // Additional Scope Info \n     /////////////////////////// \n\n     // Show scope extent in point format \n     extent_points :   true , \n\n     // Show scope extent in line/char format \n     extent_line_char :   true , \n\n     // Show color and style at the given point \n     styling :   true , \n\n     // When showing a color with alpha transparency, \n     // Simulate what the color would look like in sublime \n     // by mixing the relevant background color, \n     show_simulated_alpha_colors :   true , \n\n     // Show the selector names and scopes \n     // responsible for the color and styles \n     selectors :   true , \n\n     // Show current syntax and color scheme paths \n     // (click to open if using tooltips) \n     file_paths :   true , \n\n     // Highlight scope extent in view \n     highlight_extent :   true ,   extent_points  Show the extent of the scope as view points.  extent_line_char  Show the extent of the scope as line/char or row/col format.  highlight_extent  Highlight the scope extent.  styling  Show not only the color value, but also the scope and text styling.  show_simulated_alpha_colors  When showing color values, ScopeHunter can show the perceived color value of transparent colors.  It mixes the transparent foreground with the background giving the color value you are actually seeing.  selectors  Show the color scheme selectors that are responsible for applying the visible color and styles.  file_paths  Show the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view.  In the tooltip, you can click these links and open the responsible file directly in Sublime Text.  Scope Highlighting  When  highlight_extent  is enabled, this controls the visual style of the highlights.  Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file.  Just define the scope to use and the supported style as shown below.       /////////////////////////// \n     // Highlight Configuration \n     /////////////////////////// \n\n     // Scope to use for the color \n     highlight_scope :   invalid , \n\n     // Highlight style (underline|solid|outline|thin_underline|squiggly|stippled) \n     highlight_style :   outline ,   Miscellaneous Options  Lastly, there are a couple of other options:       /////////////////////////// \n     // Additional Options \n     /////////////////////////// \n\n     // Automatically copy scopes to clipboard \n     clipboard :   false , \n\n     // Allow multi-select scope hunting \n     multiselect :   true , \n\n     // Max region size to highlight \n     highlight_max_size :   100 , \n\n     // Use SubNotify plugin messages if installed \n     use_sub_notify :   true   clipboard  Auto-copies just the scope to the clipboard.  multiselect  Allow displaying of the scope info for multiple cursor selections (does not work for  show_statusbar  as space is very limited).  highlgiht_max_size  For performance, ScopeHunter is limited to highlight regions less that a given size.  If a region is bigger than the defined limit, it will not be highlighted.  You can control that limit here.  use_sub_notify  If you have the  SubNotify  installed, this will enable or disable messages through it.", 
            "title": "Scope Hunter: User Settings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nScope Hunter is released under the MIT license.\n\n\nCopyright \n 2012 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Scope Hunter is released under the MIT license.  Copyright   2012 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}