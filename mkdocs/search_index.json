{
    "docs": [
        {
            "location": "/", 
            "text": "ScopeHunter\n\n\nSyntax Scope Viewer in Sublime Text.\n\n\n\n\nScopeHunter\n\n\nThis is a simple plugin get the scope under the cursor(s) in Sublime Text.  This is useful for plugin development.\n\n\nDark theme with simple output:\n\n\n\n\nLight theme with advanced output:\n\n\n\n\nFeatures\n\n\nAll features are configurable via the settings file\n\n\n\n\nOptionally show output in tooltip (stylesheets are configurable)\n\n\nOptionally auto choose dark or light tooltip theme depending on your color scheme.\n\n\nOptionally dump output to auto-popup panel and/or console\n\n\nOptionally dump scope to status bar (no multi-select support).\n\n\nMulti-select support for all output except status bar.\n\n\nOptionally log scope extent in line/char format and/or point format.\n\n\nOptionally copy scope(s) to clipboard\n\n\nOptionally highlight and/or log scope extent.\n\n\nOptionally log color scheme colors and selectors.\n\n\nOptionally log location of Scheme file and Syntax.\n\n\nSupports \nSubNotify\n messages.", 
            "title": "About ScopeHunter"
        }, 
        {
            "location": "/#scopehunter", 
            "text": "Syntax Scope Viewer in Sublime Text.", 
            "title": "ScopeHunter"
        }, 
        {
            "location": "/#scopehunter_1", 
            "text": "This is a simple plugin get the scope under the cursor(s) in Sublime Text.  This is useful for plugin development.  Dark theme with simple output:   Light theme with advanced output:", 
            "title": "ScopeHunter"
        }, 
        {
            "location": "/#features", 
            "text": "All features are configurable via the settings file   Optionally show output in tooltip (stylesheets are configurable)  Optionally auto choose dark or light tooltip theme depending on your color scheme.  Optionally dump output to auto-popup panel and/or console  Optionally dump scope to status bar (no multi-select support).  Multi-select support for all output except status bar.  Optionally log scope extent in line/char format and/or point format.  Optionally copy scope(s) to clipboard  Optionally highlight and/or log scope extent.  Optionally log color scheme colors and selectors.  Optionally log location of Scheme file and Syntax.  Supports  SubNotify  messages.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling ScopeHunter.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install ScopeHunter is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn sublime, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nScopeHunter\n, when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ScopeHunter for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git ScopeHunter\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing ScopeHunter.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ScopeHunter is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In sublime, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  ScopeHunter , when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install ScopeHunter for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git ScopeHunter    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of ScopeHunter.\n\n\n\n\nCommand Usage\n\n\nAll commands are accessible via the command palette.\n\n\nScope Hunter: Show Scope Under Cursor\n\n\nShow scope under cursor or cursors (depending whether multi-select is enabled)\n\n\nScope Hunter: Toggle Instant Scoper\n\n\nToggle scoping under cursor constantly.\n\n\nScope Hunter: User Settings\n\n\nIn order to change the standard settings of Scope Hunter, please go to \nPreferences -\n Package Settings -\n Scope Hunter\n and click on \nSettings - User\n.  Repeat that for \nSettings - Default\n, copy all the settings from the default file that you wish to change to the user settings file.\n\n\nCustomizing Tooltip Theme\n\n\nOn the latest ST3 branches, a new tooltip API is available.  ScopeHunter can take advantage of this feature and provide useful scope tooltips when invoked.  ScopeHunter comes with a theme that provides a light and dark variant that will be used depending on how light or dark you current color scheme is.\n\n\nYou can create your own if desired and use it instead of the default.  The theme folder must include a \nlight.tt_theme\n file and a \ndark.tt_theme\n file.  The \ntt_theme\n files are a JSON files with a slightly modified syntax allowing JavaScript style comments.  \ntt_theme\n files point to needed theme assets and set certain variables that are not defined in CSS files.  All assets should be contained within the tt_theme folder and paths in the \ntt_theme\n files are relative to the \ntt_theme\n file itself.  Do not use windows style backslashes \n\\\n.\n\n\nExample tt_theme structure:\n\n\ntt_theme/\n    dark.tt_theme\n    light.tt_theme\n    css/\n        dark.css\n        light.css\n\n\n\n\n\nPlease use the default \ntt_theme\n as an example and template for creating your own.  In the default \ntt_theme\n you should be able to see all the settings that can be set, and all the CSS classes that can be targeted.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of ScopeHunter.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#command-usage", 
            "text": "All commands are accessible via the command palette.", 
            "title": "Command Usage"
        }, 
        {
            "location": "/usage/#scope-hunter-show-scope-under-cursor", 
            "text": "Show scope under cursor or cursors (depending whether multi-select is enabled)", 
            "title": "Scope Hunter: Show Scope Under Cursor"
        }, 
        {
            "location": "/usage/#scope-hunter-toggle-instant-scoper", 
            "text": "Toggle scoping under cursor constantly.", 
            "title": "Scope Hunter: Toggle Instant Scoper"
        }, 
        {
            "location": "/usage/#scope-hunter-user-settings", 
            "text": "In order to change the standard settings of Scope Hunter, please go to  Preferences -  Package Settings -  Scope Hunter  and click on  Settings - User .  Repeat that for  Settings - Default , copy all the settings from the default file that you wish to change to the user settings file.", 
            "title": "Scope Hunter: User Settings"
        }, 
        {
            "location": "/usage/#customizing-tooltip-theme", 
            "text": "On the latest ST3 branches, a new tooltip API is available.  ScopeHunter can take advantage of this feature and provide useful scope tooltips when invoked.  ScopeHunter comes with a theme that provides a light and dark variant that will be used depending on how light or dark you current color scheme is.  You can create your own if desired and use it instead of the default.  The theme folder must include a  light.tt_theme  file and a  dark.tt_theme  file.  The  tt_theme  files are a JSON files with a slightly modified syntax allowing JavaScript style comments.   tt_theme  files point to needed theme assets and set certain variables that are not defined in CSS files.  All assets should be contained within the tt_theme folder and paths in the  tt_theme  files are relative to the  tt_theme  file itself.  Do not use windows style backslashes  \\ .  Example tt_theme structure:  tt_theme/\n    dark.tt_theme\n    light.tt_theme\n    css/\n        dark.css\n        light.css  Please use the default  tt_theme  as an example and template for creating your own.  In the default  tt_theme  you should be able to see all the settings that can be set, and all the CSS classes that can be targeted.", 
            "title": "Customizing Tooltip Theme"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n and \nflake8_docstrings\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing & Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8  and  flake8_docstrings .  These can be installed via:  pip install flake8\npip install flake8_docstrings  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nScope Hunter is released under the MIT license.\n\n\nCopyright \n 2012 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Scope Hunter is released under the MIT license.  Copyright   2012 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}