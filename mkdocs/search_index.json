{
    "docs": [
        {
            "location": "/", 
            "text": "ScopeHunter\n\ue157\n\n\nOverview\n\ue157\n\n\nThis is a simple plugin that can get the scope under the cursor(s) in Sublime Text.  This plugin is useful for plugin development.\n\n\nDark theme with simple output:\n\n\n\n\nLight theme with advanced output:\n\n\n\n\nFeatures\n\ue157\n\n\nAll features are configurable via the settings file\n\n\n\n\nOptionally show output in tooltip (stylesheets are configurable).\n\n\nOptionally auto choose dark or light tooltip theme depending on your color scheme.\n\n\nOptionally dump output to auto-popup panel and/or console.\n\n\nOptionally dump scope to status bar (no multi-select support).\n\n\nMulti-select support for all output except status bar.\n\n\nOptionally log scope extent in line/char format and/or point format.\n\n\nOptionally copy scope(s) to clipboard.\n\n\nOptionally highlight and/or log scope extent.\n\n\nOptionally log color scheme colors and selectors.\n\n\nOptionally log location of Scheme file and Syntax.\n\n\nSupports \nSubNotify\n messages.", 
            "title": "About ScopeHunter"
        }, 
        {
            "location": "/#scopehunter", 
            "text": "", 
            "title": "ScopeHunter"
        }, 
        {
            "location": "/#overview", 
            "text": "This is a simple plugin that can get the scope under the cursor(s) in Sublime Text.  This plugin is useful for plugin development.  Dark theme with simple output:   Light theme with advanced output:", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "All features are configurable via the settings file   Optionally show output in tooltip (stylesheets are configurable).  Optionally auto choose dark or light tooltip theme depending on your color scheme.  Optionally dump output to auto-popup panel and/or console.  Optionally dump scope to status bar (no multi-select support).  Multi-select support for all output except status bar.  Optionally log scope extent in line/char format and/or point format.  Optionally copy scope(s) to clipboard.  Optionally highlight and/or log scope extent.  Optionally log color scheme colors and selectors.  Optionally log location of Scheme file and Syntax.  Supports  SubNotify  messages.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nThe recommended way to install ScopeHunter is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (macOS) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nScopeHunter\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ScopeHunter for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone ScopeHunter and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install ScopeHunter without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe\n -\n \nmarkupsafe\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2\n -\n \npython-jinja2\n\n\nhttps://github.com/packagecontrol/pygments\n -\n \npygments\n\n\nhttps://github.com/facelessuser/sublime-markdown-popups\n -\n \nmdpopups\n\n\nhttps://github.com/facelessuser/sublime-markdown\n -\n \npython-markdown\n\n\n\n\n\n\n\n\nDownload and unpack or git clone the latest ScopeHunter release and unpack as \nScopeHunter\n:\n\n\n\n\nhttps://github.com/facelessuser/ScopeHunter\n -\n ScopeHunter\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \nsys_path.py\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n3\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n2\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can\nt import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - \nver\n\n\n         - \nplat\n\n\n         - \narch\n\n\n    \n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\nPackages\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\nst\n%s\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \nall\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nall\n),\n\n        \nver\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \nplat\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \narch\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\npygments\n)\n\n\nadd_dependency\n(\nmarkupsafe\n)\n\n\nadd_dependency\n(\npython-markdown\n)\n\n\nadd_dependency\n(\npython-jinja2\n)\n\n\nadd_dependency\n(\nmdpopups\n)\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git RegReplace\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ScopeHunter is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (macOS) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  ScopeHunter ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "Warning  This is not the recommended way to install ScopeHunter for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone ScopeHunter and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install ScopeHunter without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe  -   markupsafe  https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2  -   python-jinja2  https://github.com/packagecontrol/pygments  -   pygments  https://github.com/facelessuser/sublime-markdown-popups  -   mdpopups  https://github.com/facelessuser/sublime-markdown  -   python-markdown     Download and unpack or git clone the latest ScopeHunter release and unpack as  ScopeHunter :   https://github.com/facelessuser/ScopeHunter  -  ScopeHunter     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   nt : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   =   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   sys_path.py : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u 3  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u 2  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n          Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can t import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning       \n\n     if   os . name   ==   nt : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n          Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file       \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   nt : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n          Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           -  ver           -  plat           -  arch       \n\n     packages_dir   =   os . path . join ( st_dir ,   u Packages ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u st %s   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         all :   os . path . join ( dependency_dir ,   all ), \n         ver :   os . path . join ( dependency_dir ,   ver ), \n         plat :   os . path . join ( dependency_dir ,   u %s _ %s   %   ( ver ,   plat )), \n         arch :   os . path . join ( dependency_dir ,   u %s _ %s _ %s   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n          Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list       \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( pygments )  add_dependency ( markupsafe )  add_dependency ( python-markdown )  add_dependency ( python-jinja2 )  add_dependency ( mdpopups )     Restart and enjoy.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ScopeHunter.git RegReplace    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\ue157\n\n\nCommand Usage\n\ue157\n\n\nAll commands are accessible via the command palette.\n\n\nScope Hunter: Show Scope Under Cursor\n\ue157\n\n\nShow scope under cursor or cursors (depending whether multi-select is enabled).\n\n\nScope Hunter: Toggle Instant Scoper\n\ue157\n\n\nToggle scoping under cursor constantly, but only for the current active file view.\n\n\nScope Hunter: Generate Color Scheme CSS\n\ue157\n\n\nGenerate CSS from valid scopes in color scheme.  This is great for dropping in Sublime tooltips.\n\n\nExample output:\n\n\n.\nforeground\n \n{\n \ncolor\n:\n \n#CCCCCC\n;\n \n}\n\n\n.\nbackground\n \n{\n \nbackground-color\n:\n \n#232628\n;\n \n}\n\n\n.\ncomment\n \n{\n \ncolor\n:\n \n#888888\n;\n \n}\n\n\n.\nconstant\n.\nother\n \n{\n \ncolor\n:\n \n#CCCCCC\n;\n \n}\n\n\n.\nentity\n.\nname\n.\ntag\n \n{\n \ncolor\n:\n \n#F2777A\n;\n \n}\n\n\n.\nentity\n.\nother\n.\nattribute-name\n \n{\n \ncolor\n:\n \n#F2777A\n;\n \n}\n\n\n.\nconstant\n.\nnumeric\n \n{\n \ncolor\n:\n \n#F99157\n;\n \n}\n\n\n.\nsupport\n.\nconstant\n \n{\n \ncolor\n:\n \n#F99157\n;\n \n}\n\n\n.\nconstant\n.\ncharacter\n \n{\n \ncolor\n:\n \n#F99157\n;\n \n}\n\n\n.\nvariable\n.\nparameter\n \n{\n \ncolor\n:\n \n#F99157\n;\n \n}\n\n\n.\nsupport\n.\ntype\n \n{\n \ncolor\n:\n \n#FFCC66\n;\n \n}\n\n\n.\nsupport\n.\nclass\n \n{\n \ncolor\n:\n \n#FFCC66\n;\n \n}\n\n\n.\nstring\n \n{\n \ncolor\n:\n \n#99CC99\n;\n \n}\n\n\n.\nentity\n.\nother\n.\ninherited-class\n \n{\n \ncolor\n:\n \n#99CC99\n;\n \n}\n\n\n.\nmarkup\n.\nheading\n \n{\n \ncolor\n:\n \n#99CC99\n;\n \n}\n\n\n.\nkeyword\n.\noperator\n \n{\n \ncolor\n:\n \n#66CCCC\n;\n \n}\n\n\n.\nentity\n.\nname\n.\nfunction\n \n{\n \ncolor\n:\n \n#6699CC\n;\n \n}\n\n\n.\nsupport\n.\nfunction\n \n{\n \ncolor\n:\n \n#6699CC\n;\n \n}\n\n\n.\nkeyword\n \n{\n \ncolor\n:\n \n#CC99CC\n;\n \n}\n\n\n.\nstorage\n \n{\n \ncolor\n:\n \n#CC99CC\n;\n \n}\n\n\n.\nstorage\n.\ntype\n \n{\n \ncolor\n:\n \n#CC99CC\n;\n \n}\n\n\n.\ninvalid\n \n{\n \ncolor\n:\n \n#FAFDFF\n;\n \nbackground-color\n:\n \n#F2777A\n;\n \n}\n\n\n.\ninvalid\n.\ndeprecated\n \n{\n \ncolor\n:\n \n#FAFDFF\n;\n \nbackground-color\n:\n \n#CC99CC\n;\n \n}\n\n\n.\nvariable\n.\nlanguage\n \n{\n \ncolor\n:\n \n#FFCC66\n;\n \n}\n\n\n.\nmarkup\n.\nunderline\n.\nlink\n \n{\n \ncolor\n:\n \n#99CCCC\n;\n \n}\n\n\n.\nmarkup\n.\nbold\n \n{\n \ncolor\n:\n \n#CC99CC\n;\n \nfont-weight\n:\n \nbold\n;\n \n}\n\n\n.\nmarkup\n.\nitalic\n \n{\n \ncolor\n:\n \n#CC99CC\n;\n \nfont-style\n:\n \nitalic\n;\n \n}\n\n\n\n\n\nScope Hunter: User Settings\n\ue157\n\n\nIn order to change the standard settings of Scope Hunter, please go to \nPreferences -\n Package Settings -\n Scope Hunter\n and click on \nSettings - User\n.  Repeat that for \nSettings - Default\n, copy all the settings that you wish to change from the default settings to the user settings file.\n\n\nDeveloper Options\n\ue157\n\n\nThese settings are for debugging issues.\n\n\n    \n///////////////////////////\n\n    \n// Dev Options\n\n    \n///////////////////////////\n\n    \ndebug\n:\n \nfalse\n,\n\n\n\n\n\ndebug\n\ue157\n\n\nTurns on debug logging.\n\n\nView options\n\ue157\n\n\nBy default, ScopeHunter (on \nST3\n) uses the output panel to communicate the scope.  But if you prefer a more subtle \nor\n flashier way of displaying the scope, ScopeHunter can be configured to do so.\n\n\n    \n///////////////////////////\n\n    \n// View Options\n\n    \n///////////////////////////\n\n\n    \n// Show popup tooltip with info about scope\n\n    \nshow_popup\n:\n \nfalse\n,\n\n\n    \n// Show scope in status bar\n\n    \nshow_statusbar\n:\n \nfalse\n,\n\n\n    \n// Show scope in auto-popup panel\n\n    \nshow_panel\n:\n \ntrue\n,\n\n\n    \n// Show scopes in console\n\n    \nconsole_log\n:\n \nfalse\n,\n\n\n\n\n\nshow_popup\n\ue157\n\n\nThis uses the new \nST3\n tooltip API to display and is my personal favorite.  It shows a styled tooltip with all the information about the scope of the current cursor(s).  You get previews of the colors, and you can click links to copy the info to the clipboard.\n\n\nshow_statusbar\n\ue157\n\n\nThis shows just the scope in the status bar.  Simple and subtle.\n\n\nshow_panel\n\ue157\n\n\nThis shows the scope and related info in an output panel.  This allows a user to directly copy and paste the info from the panel.\n\n\nconsole_log\n\ue157\n\n\nThis is useful if you are doing something like \nshow_statusbar\n.  You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste.\n\n\nScope Info\n\ue157\n\n\nFor modes like \nshow_panel\n, \nconsole_log\n, and \nshow_popup\n you can control the info displayed.  You can keep it just to the scope, or you can extend it show other useful info.\n\n\n    \n///////////////////////////\n\n    \n// Additional Scope Info\n\n    \n///////////////////////////\n\n\n    \n// Show scope extent in point format\n\n    \nextent_points\n:\n \ntrue\n,\n\n\n    \n// Show scope extent in line/char format\n\n    \nextent_line_char\n:\n \ntrue\n,\n\n\n    \n// Show color and style at the given point\n\n    \nstyling\n:\n \ntrue\n,\n\n\n    \n// When showing a color with alpha transparency,\n\n    \n// Simulate what the color would look like in sublime\n\n    \n// by mixing the relevant background color,\n\n    \nshow_simulated_alpha_colors\n:\n \ntrue\n,\n\n\n    \n// Show the selector names and scopes\n\n    \n// responsible for the color and styles\n\n    \nselectors\n:\n \ntrue\n,\n\n\n    \n// Show current syntax and color scheme paths\n\n    \n// (click to open if using tooltips)\n\n    \nfile_paths\n:\n \ntrue\n,\n\n\n    \n// Highlight scope extent in view\n\n    \nhighlight_extent\n:\n \ntrue\n,\n\n\n\n\n\nextent_points\n\ue157\n\n\nShow the extent of the scope as view points.\n\n\nextent_line_char\n\ue157\n\n\nShow the extent of the scope as line/char or row/col format.\n\n\nhighlight_extent\n\ue157\n\n\nHighlight the scope extent.\n\n\nstyling\n\ue157\n\n\nShow not only the color value, but also the scope and text styling.\n\n\nshow_simulated_alpha_colors\n\ue157\n\n\nWhen showing color values, ScopeHunter can show the perceived color value of transparent colors.  It mixes the transparent foreground with the background giving the color value you are actually seeing.\n\n\nselectors\n\ue157\n\n\nShow the color scheme selectors that are responsible for applying the visible color and styles.\n\n\nfile_paths\n\ue157\n\n\nShow the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view.  In the tooltip, you can click these links and open the responsible file directly in Sublime Text.\n\n\nScope Highlighting\n\ue157\n\n\nWhen \nhighlight_extent\n is enabled, this controls the visual style of the highlights.  Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file.  Just define the scope to use and the supported style as shown below.\n\n\n    \n///////////////////////////\n\n    \n// Highlight Configuration\n\n    \n///////////////////////////\n\n\n    \n// Scope to use for the color\n\n    \nhighlight_scope\n:\n \ninvalid\n,\n\n\n    \n// Highlight style (underline|solid|outline|thin_underline|squiggly|stippled)\n\n    \nhighlight_style\n:\n \noutline\n,\n\n\n\n\n\nMiscellaneous Options\n\ue157\n\n\nLastly, there are a couple of other options:\n\n\n    \n///////////////////////////\n\n    \n// Additional Options\n\n    \n///////////////////////////\n\n\n    \n// Automatically copy scopes to clipboard\n\n    \nclipboard\n:\n \nfalse\n,\n\n\n    \n// Allow multi-select scope hunting\n\n    \nmultiselect\n:\n \ntrue\n,\n\n\n    \n// Max region size to highlight\n\n    \nhighlight_max_size\n:\n \n100\n,\n\n\n    \n// Use SubNotify plugin messages if installed\n\n    \nuse_sub_notify\n:\n \ntrue\n\n\n\n\n\nclipboard\n\ue157\n\n\nAuto-copies just the scope to the clipboard.\n\n\nmultiselect\n\ue157\n\n\nAllow displaying of the scope info for multiple cursor selections (does not work for \nshow_statusbar\n as space is very limited).\n\n\nhighlgiht_max_size\n\ue157\n\n\nFor performance, ScopeHunter is limited to highlight regions less that a given size.  If a region is bigger than the defined limit, it will not be highlighted.  You can control that limit here.\n\n\nuse_sub_notify\n\ue157\n\n\nIf you have the \nSubNotify\n installed, this will enable or disable messages through it.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#command-usage", 
            "text": "All commands are accessible via the command palette.", 
            "title": "Command Usage"
        }, 
        {
            "location": "/usage/#scope-hunter-show-scope-under-cursor", 
            "text": "Show scope under cursor or cursors (depending whether multi-select is enabled).", 
            "title": "Scope Hunter: Show Scope Under Cursor"
        }, 
        {
            "location": "/usage/#scope-hunter-toggle-instant-scoper", 
            "text": "Toggle scoping under cursor constantly, but only for the current active file view.", 
            "title": "Scope Hunter: Toggle Instant Scoper"
        }, 
        {
            "location": "/usage/#scope-hunter-generate-color-scheme-css", 
            "text": "Generate CSS from valid scopes in color scheme.  This is great for dropping in Sublime tooltips.  Example output:  . foreground   {   color :   #CCCCCC ;   }  . background   {   background-color :   #232628 ;   }  . comment   {   color :   #888888 ;   }  . constant . other   {   color :   #CCCCCC ;   }  . entity . name . tag   {   color :   #F2777A ;   }  . entity . other . attribute-name   {   color :   #F2777A ;   }  . constant . numeric   {   color :   #F99157 ;   }  . support . constant   {   color :   #F99157 ;   }  . constant . character   {   color :   #F99157 ;   }  . variable . parameter   {   color :   #F99157 ;   }  . support . type   {   color :   #FFCC66 ;   }  . support . class   {   color :   #FFCC66 ;   }  . string   {   color :   #99CC99 ;   }  . entity . other . inherited-class   {   color :   #99CC99 ;   }  . markup . heading   {   color :   #99CC99 ;   }  . keyword . operator   {   color :   #66CCCC ;   }  . entity . name . function   {   color :   #6699CC ;   }  . support . function   {   color :   #6699CC ;   }  . keyword   {   color :   #CC99CC ;   }  . storage   {   color :   #CC99CC ;   }  . storage . type   {   color :   #CC99CC ;   }  . invalid   {   color :   #FAFDFF ;   background-color :   #F2777A ;   }  . invalid . deprecated   {   color :   #FAFDFF ;   background-color :   #CC99CC ;   }  . variable . language   {   color :   #FFCC66 ;   }  . markup . underline . link   {   color :   #99CCCC ;   }  . markup . bold   {   color :   #CC99CC ;   font-weight :   bold ;   }  . markup . italic   {   color :   #CC99CC ;   font-style :   italic ;   }", 
            "title": "Scope Hunter: Generate Color Scheme CSS"
        }, 
        {
            "location": "/usage/#scope-hunter-user-settings", 
            "text": "In order to change the standard settings of Scope Hunter, please go to  Preferences -  Package Settings -  Scope Hunter  and click on  Settings - User .  Repeat that for  Settings - Default , copy all the settings that you wish to change from the default settings to the user settings file.", 
            "title": "Scope Hunter: User Settings"
        }, 
        {
            "location": "/usage/#developer-options", 
            "text": "These settings are for debugging issues.       /////////////////////////// \n     // Dev Options \n     /////////////////////////// \n     debug :   false ,", 
            "title": "Developer Options"
        }, 
        {
            "location": "/usage/#debug", 
            "text": "Turns on debug logging.", 
            "title": "debug"
        }, 
        {
            "location": "/usage/#view-options", 
            "text": "By default, ScopeHunter (on  ST3 ) uses the output panel to communicate the scope.  But if you prefer a more subtle  or  flashier way of displaying the scope, ScopeHunter can be configured to do so.       /////////////////////////// \n     // View Options \n     /////////////////////////// \n\n     // Show popup tooltip with info about scope \n     show_popup :   false , \n\n     // Show scope in status bar \n     show_statusbar :   false , \n\n     // Show scope in auto-popup panel \n     show_panel :   true , \n\n     // Show scopes in console \n     console_log :   false ,", 
            "title": "View options"
        }, 
        {
            "location": "/usage/#show_popup", 
            "text": "This uses the new  ST3  tooltip API to display and is my personal favorite.  It shows a styled tooltip with all the information about the scope of the current cursor(s).  You get previews of the colors, and you can click links to copy the info to the clipboard.", 
            "title": "show_popup"
        }, 
        {
            "location": "/usage/#show_statusbar", 
            "text": "This shows just the scope in the status bar.  Simple and subtle.", 
            "title": "show_statusbar"
        }, 
        {
            "location": "/usage/#show_panel", 
            "text": "This shows the scope and related info in an output panel.  This allows a user to directly copy and paste the info from the panel.", 
            "title": "show_panel"
        }, 
        {
            "location": "/usage/#console_log", 
            "text": "This is useful if you are doing something like  show_statusbar .  You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste.", 
            "title": "console_log"
        }, 
        {
            "location": "/usage/#scope-info", 
            "text": "For modes like  show_panel ,  console_log , and  show_popup  you can control the info displayed.  You can keep it just to the scope, or you can extend it show other useful info.       /////////////////////////// \n     // Additional Scope Info \n     /////////////////////////// \n\n     // Show scope extent in point format \n     extent_points :   true , \n\n     // Show scope extent in line/char format \n     extent_line_char :   true , \n\n     // Show color and style at the given point \n     styling :   true , \n\n     // When showing a color with alpha transparency, \n     // Simulate what the color would look like in sublime \n     // by mixing the relevant background color, \n     show_simulated_alpha_colors :   true , \n\n     // Show the selector names and scopes \n     // responsible for the color and styles \n     selectors :   true , \n\n     // Show current syntax and color scheme paths \n     // (click to open if using tooltips) \n     file_paths :   true , \n\n     // Highlight scope extent in view \n     highlight_extent :   true ,", 
            "title": "Scope Info"
        }, 
        {
            "location": "/usage/#extent_points", 
            "text": "Show the extent of the scope as view points.", 
            "title": "extent_points"
        }, 
        {
            "location": "/usage/#extent_line_char", 
            "text": "Show the extent of the scope as line/char or row/col format.", 
            "title": "extent_line_char"
        }, 
        {
            "location": "/usage/#highlight_extent", 
            "text": "Highlight the scope extent.", 
            "title": "highlight_extent"
        }, 
        {
            "location": "/usage/#styling", 
            "text": "Show not only the color value, but also the scope and text styling.", 
            "title": "styling"
        }, 
        {
            "location": "/usage/#show_simulated_alpha_colors", 
            "text": "When showing color values, ScopeHunter can show the perceived color value of transparent colors.  It mixes the transparent foreground with the background giving the color value you are actually seeing.", 
            "title": "show_simulated_alpha_colors"
        }, 
        {
            "location": "/usage/#selectors", 
            "text": "Show the color scheme selectors that are responsible for applying the visible color and styles.", 
            "title": "selectors"
        }, 
        {
            "location": "/usage/#file_paths", 
            "text": "Show the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view.  In the tooltip, you can click these links and open the responsible file directly in Sublime Text.", 
            "title": "file_paths"
        }, 
        {
            "location": "/usage/#scope-highlighting", 
            "text": "When  highlight_extent  is enabled, this controls the visual style of the highlights.  Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file.  Just define the scope to use and the supported style as shown below.       /////////////////////////// \n     // Highlight Configuration \n     /////////////////////////// \n\n     // Scope to use for the color \n     highlight_scope :   invalid , \n\n     // Highlight style (underline|solid|outline|thin_underline|squiggly|stippled) \n     highlight_style :   outline ,", 
            "title": "Scope Highlighting"
        }, 
        {
            "location": "/usage/#miscellaneous-options", 
            "text": "Lastly, there are a couple of other options:       /////////////////////////// \n     // Additional Options \n     /////////////////////////// \n\n     // Automatically copy scopes to clipboard \n     clipboard :   false , \n\n     // Allow multi-select scope hunting \n     multiselect :   true , \n\n     // Max region size to highlight \n     highlight_max_size :   100 , \n\n     // Use SubNotify plugin messages if installed \n     use_sub_notify :   true", 
            "title": "Miscellaneous Options"
        }, 
        {
            "location": "/usage/#clipboard", 
            "text": "Auto-copies just the scope to the clipboard.", 
            "title": "clipboard"
        }, 
        {
            "location": "/usage/#multiselect", 
            "text": "Allow displaying of the scope info for multiple cursor selections (does not work for  show_statusbar  as space is very limited).", 
            "title": "multiselect"
        }, 
        {
            "location": "/usage/#highlgiht_max_size", 
            "text": "For performance, ScopeHunter is limited to highlight regions less that a given size.  If a region is bigger than the defined limit, it will not be highlighted.  You can control that limit here.", 
            "title": "highlgiht_max_size"
        }, 
        {
            "location": "/usage/#use_sub_notify", 
            "text": "If you have the  SubNotify  installed, this will enable or disable messages through it.", 
            "title": "use_sub_notify"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen an issue is created, a \ntemplate\n will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked \nInvalid\n and closed.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences-\nPackage Settings-\nRegReplace-\nSupport Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\nProvide link to color scheme used (with link if a 3\nrd\n party color scheme) if applicable.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n.  You can install \npytest\n via:\n\n\npip install pytest\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install pep8-naming\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing--support", 
            "text": "", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When an issue is created, a  template  will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked  Invalid  and closed.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences- Package Settings- RegReplace- Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.  Provide link to color scheme used (with link if a 3 rd  party color scheme) if applicable.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  pytest .  You can install  pytest  via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with  flake8 ,  flake8-docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\ue157\n\n\nScope Hunter is released under the MIT license.\n\n\nCopyright \n 2012 - 2016 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Scope Hunter is released under the MIT license.  Copyright   2012 - 2016 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}